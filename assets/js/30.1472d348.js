(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{352:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"c-学习笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-学习笔记"}},[t._v("#")]),t._v(" C++学习笔记")]),t._v(" "),s("h2",{attrs:{id:"命名空间的using声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名空间的using声明"}},[t._v("#")]),t._v(" 命名空间的"),s("code",[t._v("using")]),t._v("声明")]),t._v(" "),s("p",[t._v("一般用到标准输入输出流的时候，库函数属于命名空间"),s("code",[t._v("std")]),t._v("，用作"),s("code",[t._v("std::cout")]),t._v("、"),s("code",[t._v("std::cin")]),t._v("\n或者在开头声明："),s("code",[t._v("using namespace std;")]),t._v("\n或者单独声明："),s("code",[t._v("using std::cin;")]),t._v("、"),s("code",[t._v("using std::cout;")])]),t._v(" "),s("h2",{attrs:{id:"类型说明符auto"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型说明符auto"}},[t._v("#")]),t._v(" 类型说明符"),s("code",[t._v("auto")])]),t._v(" "),s("p",[s("code",[t._v("auto")]),t._v("：让编译器去分析表达式所属的类型。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("auto cnt = 0;\nauto pi = 3.14;\n")])])]),s("h3",{attrs:{id:"类型指示符decltype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型指示符decltype"}},[t._v("#")]),t._v(" 类型指示符"),s("code",[t._v("decltype")])]),t._v(" "),s("p",[s("code",[t._v("decltype")]),t._v("是"),s("code",[t._v("declare type")]),t._v("的缩写，译为声明类型。\n能从表达式的类型推断出变量的类型，如：")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("decltype(sizeof(arr)) length;\n")])])]),s("h3",{attrs:{id:"基于范围的for语句-range-for"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于范围的for语句-range-for"}},[t._v("#")]),t._v(" 基于范围的"),s("code",[t._v("for")]),t._v("语句(range for)")]),t._v(" "),s("p",[t._v("for ("),s("em",[t._v("declaration")]),t._v(" : "),s("em",[t._v("expression")]),t._v(")")]),t._v(" "),s("p",[t._v("​\t"),s("em",[t._v("statement")])]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 将string中的字符分隔输出\nfor (auto c : str)\n{\n    cout << c << “ ”;\n}\ncout << str; // h e l l o   w o r l d\n\n// 将string中字符编程大写\n// 用上引用符 &\nfor (auto &c : str)\n{\n    c = toupper(c);\n}\ncout << str; // HELLO WORLD\n")])])]),s("h3",{attrs:{id:"静态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态"}},[t._v("#")]),t._v(" 静态")]),t._v(" "),s("h3",{attrs:{id:"静态成员变量和静态成员函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态成员变量和静态成员函数"}},[t._v("#")]),t._v(" 静态成员变量和静态成员函数")]),t._v(" "),s("p",[t._v("类中定义的静态成员、函数，为整个类所有，为所有对象共有，所有对象共享。")]),t._v(" "),s("p",[t._v("可以通过类名访问，也可以通过对象直接访问。")]),t._v(" "),s("p",[t._v("静态成员函数只能直接访问静态变量和静态函数（因为不能实例化）。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string>")])]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义私有类的静态成员变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tm_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义类的静态成员函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" m_value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" test"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("m_value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类的静态成员变量需要在类外分配内存空间")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    test t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    test t3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test::m_value2 = "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" test"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过类名直接调用公有静态成员函数，获取对象个数")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t3.getValue() = "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" t3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过对象名调用静态成员函数获取对象个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("system")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pause"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果为3")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://img-blog.csdn.net/20180804112453261?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtczEwMDg2MTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:"img"}})]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("静态成员函数")]),t._v(" "),s("th",[t._v("普通成员函数")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("所有对象共享")]),t._v(" "),s("td",[t._v("yes")]),t._v(" "),s("td",[t._v("yes")])]),t._v(" "),s("tr",[s("td",[t._v("隐含"),s("code",[t._v("this")]),t._v("指针")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("yes")])]),t._v(" "),s("tr",[s("td",[t._v("访问普通成员变量（函数）")]),t._v(" "),s("td",[t._v("no")]),t._v(" "),s("td",[t._v("yes")])]),t._v(" "),s("tr",[s("td",[t._v("访问静态成员变量（函数）")]),t._v(" "),s("td",[t._v("yes")]),t._v(" "),s("td",[t._v("yes")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);